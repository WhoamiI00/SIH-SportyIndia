# Generated by Django 5.2.6 on 2025-09-05 11:19

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AthleteProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('auth_user_id', models.UUIDField(unique=True)),
                ('full_name', models.CharField(max_length=255)),
                ('date_of_birth', models.DateField()),
                ('age', models.IntegerField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10)),
                ('height', models.DecimalField(decimal_places=2, help_text='Height in cm', max_digits=5)),
                ('weight', models.DecimalField(decimal_places=2, help_text='Weight in kg', max_digits=5)),
                ('phone_number', models.CharField(max_length=15)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('address', models.TextField()),
                ('state', models.CharField(max_length=100)),
                ('district', models.CharField(max_length=100)),
                ('pin_code', models.CharField(max_length=10)),
                ('location_category', models.CharField(choices=[('rural', 'Rural'), ('urban', 'Urban'), ('tribal', 'Tribal Area'), ('remote', 'Remote Area')], max_length=20)),
                ('aadhaar_number', models.CharField(help_text='For identity verification', max_length=12, unique=True)),
                ('sports_interests', models.JSONField(default=list)),
                ('previous_sports_experience', models.TextField(blank=True, null=True)),
                ('profile_picture_url', models.URLField(blank=True, null=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('document_submitted', 'Documents Submitted'), ('verified', 'Verified'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('overall_talent_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('talent_grade', models.CharField(blank=True, max_length=5, null=True)),
                ('national_ranking', models.IntegerField(blank=True, null=True)),
                ('state_ranking', models.IntegerField(blank=True, null=True)),
                ('total_points', models.IntegerField(default=0)),
                ('badges_earned', models.JSONField(default=list)),
                ('level', models.IntegerField(default=1)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'athlete_profiles',
            },
        ),
        migrations.CreateModel(
            name='Badge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('badge_type', models.CharField(choices=[('performance', 'Performance Achievement'), ('consistency', 'Consistency'), ('improvement', 'Improvement'), ('participation', 'Participation'), ('special', 'Special Achievement')], max_length=20)),
                ('icon_url', models.URLField()),
                ('criteria', models.JSONField(help_text='JSON defining criteria to earn this badge')),
                ('points_reward', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'badges',
            },
        ),
        migrations.CreateModel(
            name='FitnessTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('height_weight', 'Height & Weight Measurement'), ('vertical_jump', 'Vertical Jump'), ('shuttle_run', 'Shuttle Run'), ('situps', 'Sit-ups'), ('endurance_run', 'Endurance Run (1600m)'), ('flexibility', 'Flexibility Test'), ('agility', 'Agility Test')], max_length=50, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('instructions', models.TextField()),
                ('video_demo_url', models.URLField(blank=True, null=True)),
                ('duration_seconds', models.IntegerField(blank=True, help_text='Max time for test', null=True)),
                ('requires_video', models.BooleanField(default=True)),
                ('measurement_unit', models.CharField(max_length=20)),
                ('ai_model_config', models.JSONField(default=dict, help_text='Configuration for AI analysis')),
                ('cheat_detection_enabled', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'fitness_tests',
            },
        ),
        migrations.CreateModel(
            name='AssessmentSession',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_name', models.CharField(default='Fitness Assessment', max_length=255)),
                ('status', models.CharField(choices=[('created', 'Created'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('submitted_to_sai', 'Submitted to SAI'), ('verified_by_sai', 'Verified by SAI')], default='created', max_length=20)),
                ('total_tests', models.IntegerField(default=7)),
                ('completed_tests', models.IntegerField(default=0)),
                ('overall_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('overall_grade', models.CharField(blank=True, max_length=5, null=True)),
                ('percentile_rank', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('sai_submission_id', models.CharField(blank=True, max_length=100, null=True)),
                ('sai_officer_notes', models.TextField(blank=True, null=True)),
                ('sai_verification_status', models.CharField(blank=True, max_length=20, null=True)),
                ('device_info', models.JSONField(blank=True, null=True)),
                ('network_quality', models.CharField(blank=True, max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('athlete', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sporty.athleteprofile')),
            ],
            options={
                'db_table': 'assessment_sessions',
            },
        ),
        migrations.CreateModel(
            name='Leaderboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('leaderboard_type', models.CharField(choices=[('national', 'National'), ('state', 'State'), ('district', 'District'), ('age_group', 'Age Group'), ('test_specific', 'Test Specific')], max_length=20)),
                ('current_rank', models.IntegerField()),
                ('previous_rank', models.IntegerField(blank=True, null=True)),
                ('total_participants', models.IntegerField()),
                ('best_score', models.DecimalField(decimal_places=3, max_digits=10)),
                ('total_points', models.IntegerField()),
                ('age_group', models.CharField(blank=True, max_length=20, null=True)),
                ('gender', models.CharField(blank=True, max_length=10, null=True)),
                ('state', models.CharField(blank=True, max_length=100, null=True)),
                ('district', models.CharField(blank=True, max_length=100, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sporty.athleteprofile')),
                ('fitness_test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sporty.fitnesstest')),
            ],
            options={
                'db_table': 'leaderboards',
            },
        ),
        migrations.CreateModel(
            name='SAISubmission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sai_reference_id', models.CharField(max_length=100, unique=True)),
                ('submitted_data', models.JSONField(help_text='Complete athlete and test data')),
                ('status', models.CharField(choices=[('pending', 'Pending Submission'), ('submitted', 'Submitted to SAI'), ('under_review', 'Under SAI Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('requires_retest', 'Requires Retest')], default='pending', max_length=20)),
                ('sai_officer_id', models.CharField(blank=True, max_length=100, null=True)),
                ('sai_comments', models.TextField(blank=True, null=True)),
                ('talent_category', models.CharField(blank=True, max_length=50, null=True)),
                ('recommended_sports', models.JSONField(blank=True, null=True)),
                ('follow_up_required', models.BooleanField(default=False)),
                ('next_assessment_date', models.DateField(blank=True, null=True)),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('assessment_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sporty.assessmentsession')),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sporty.athleteprofile')),
            ],
            options={
                'db_table': 'sai_submissions',
            },
        ),
        migrations.CreateModel(
            name='TestRecording',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('original_video_url', models.URLField()),
                ('processed_video_url', models.URLField(blank=True, null=True)),
                ('thumbnail_url', models.URLField(blank=True, null=True)),
                ('video_duration', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('video_size_mb', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('device_analysis_score', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('device_analysis_confidence', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('device_analysis_data', models.JSONField(blank=True, null=True)),
                ('ai_raw_score', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('ai_confidence', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('ai_analysis_data', models.JSONField(blank=True, null=True)),
                ('cheat_detection_score', models.DecimalField(blank=True, decimal_places=4, max_digits=5, null=True)),
                ('cheat_flags', models.JSONField(default=list)),
                ('is_suspicious', models.BooleanField(default=False)),
                ('manual_score', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('verified_by_sai_officer', models.CharField(blank=True, max_length=100, null=True)),
                ('verification_notes', models.TextField(blank=True, null=True)),
                ('final_score', models.DecimalField(blank=True, decimal_places=3, max_digits=10, null=True)),
                ('performance_grade', models.CharField(blank=True, max_length=10, null=True)),
                ('percentile', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('points_earned', models.IntegerField(blank=True, null=True)),
                ('processing_status', models.CharField(choices=[('uploaded', 'Uploaded'), ('analyzing', 'AI Analyzing'), ('cheat_checking', 'Cheat Detection'), ('completed', 'Analysis Complete'), ('failed', 'Analysis Failed'), ('flagged', 'Flagged for Review'), ('manually_verified', 'Manually Verified')], default='uploaded', max_length=20)),
                ('processing_error', models.TextField(blank=True, null=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sporty.athleteprofile')),
                ('fitness_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sporty.fitnesstest')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recordings', to='sporty.assessmentsession')),
            ],
            options={
                'db_table': 'test_recordings',
            },
        ),
        migrations.CreateModel(
            name='AgeBenchmark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age_min', models.IntegerField()),
                ('age_max', models.IntegerField()),
                ('gender', models.CharField(max_length=10)),
                ('excellent_threshold', models.DecimalField(decimal_places=3, max_digits=10)),
                ('good_threshold', models.DecimalField(decimal_places=3, max_digits=10)),
                ('average_threshold', models.DecimalField(decimal_places=3, max_digits=10)),
                ('below_average_threshold', models.DecimalField(decimal_places=3, max_digits=10)),
                ('excellent_points', models.IntegerField(default=100)),
                ('good_points', models.IntegerField(default=80)),
                ('average_points', models.IntegerField(default=60)),
                ('below_average_points', models.IntegerField(default=40)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('fitness_test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sporty.fitnesstest')),
            ],
            options={
                'db_table': 'age_benchmarks',
                'unique_together': {('fitness_test', 'age_min', 'age_max', 'gender')},
            },
        ),
        migrations.CreateModel(
            name='AthleteBadge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('athlete', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sporty.athleteprofile')),
                ('badge', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sporty.badge')),
                ('test_recording', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sporty.testrecording')),
            ],
            options={
                'db_table': 'athlete_badges',
                'unique_together': {('athlete', 'badge')},
            },
        ),
    ]
